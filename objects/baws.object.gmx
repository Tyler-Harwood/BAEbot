<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBigBaws</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = .5;
move = false;
moveIn = 150;
uDed = false;
depth = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!uDed){
    if(move){
        distance = distance_to_point(player.x, player.y) / 200;
        
        speed = max(4 * distance, 7.5);
        image_angle = point_direction(x,y,player.x,player.y);
        move_towards_point(player.x, player.y, speed);
        
        objBlackScreen.image_alpha = (1 - distance) *0.7;
        
        audio_sound_gain(main_theme, distance, 0);
        audio_sound_gain(main_theme_evil, 1 - distance, 0);
        
        if(distance &lt; 0.02 &amp;&amp; !uDed){
            with(player){
                visible = false;
                canMove = false;
            }
            audio_play_sound(ghost, 1, false);
            audio_sound_gain(ghost, global.SFX_VOLUME, 0);
            uDed = true;
            move = false;
            moveIn = -1;
            audio_sound_gain(main_theme, 0, 100);
            audio_sound_gain(main_theme_evil, 0, 100);
        }
    } else {
        audio_sound_gain(main_theme, 1, 0);
        audio_sound_gain(main_theme_evil, 0, 0);
        moveIn--;
        if(moveIn == 0){
            move = true;
        }
        objBlackScreen.image_alpha = 0;
    }
} else {
    objBlackScreen.image_alpha += 0.05;
    if(objBlackScreen.image_alpha &gt;= 1){
        global.GAME_OVER = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
