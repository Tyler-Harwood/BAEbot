<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
global.scoreId = "83533"
scoreOnce = false;
//Some vars we need.
//You can skip this part.
asyncdialog[0]=-1
asyncdialog[1]=-1
asyncdialog[2]=-1
senttrophy[0]=false
senttrophy[1]=false
loggedontimes=0
uname=""
utoken=""
loginrequest=-1
httprequest[0]=-1
httprequest[1]=-1
httprequest[2]=-1
httprequest[3]=-1
httprequest[4]=-1
userisawesome=false
prevscore=0
currusertype="user"
highscorestring="(Loading)"
awesomesince="just now"


//Get the highscore.
//httprequest[1]=gj_scores_get(global.scoreId,1)
//Try to login automatically
/*if(gj_user_autologin())
{
    //And init session too.
    gj_session_open()
    alarm[0]=30*room_speed //Ping every 30 seconds.
    //Let's check if user was logged in earlier.
    httprequest[2]=gj_datastore_get_user("logincount")
    httprequest[3]=gj_user_info_fromusername(gj_user_username())
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Ping session
gj_session_ping(true) //User is active.
alarm[0]=30*room_speed //Ping every 30 seconds.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.GAME_OVER &amp;&amp; global.prevscore &lt; score &amp;&amp; !scoreOnce)
{
    scoreOnce = true;
    if(gj_user_isloggedin())
    {
        //Send user score
        httprequest[0]=gj_scores_add("83533",string(score)+" points",score,"Some extra data here.")
        global.prevscore=score
        score=0;
    } else {
        httprequest[1]=gj_scores_get(global.scoreId,10);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Handle all dialogs in the game.
var i_d;
i_d=ds_map_find_value(async_load,"id");
if (i_d==asyncdialog[0]) //Username dialog closed
{
   if(ds_map_find_value(async_load,"status"))
   {
      if(ds_map_find_value(async_load,"result")!="")
      {
         uname=ds_map_find_value(async_load,"result");
         asyncdialog[1]=get_string_async("Please enter your GameJolt user token.","")
         asyncdialog[0]=-1
      }
   }
}
if (i_d==asyncdialog[1]) //Token dialog closed
{
   if(ds_map_find_value(async_load,"status"))
   {
      if(ds_map_find_value(async_load,"result")!="")
      {
         utoken=ds_map_find_value(async_load,"result");
         loginrequest=gj_user_login(uname,utoken)
      }
   }
}
if (i_d==asyncdialog[2]) //Get guest name dialog closed
{
   if(ds_map_find_value(async_load,"status"))
   {
      if(ds_map_find_value(async_load,"result")!="")
      {
         httprequest[0]=gj_scores_add_guest(global.scoreId,string(score)+" points",score,"Some extra data here.",ds_map_find_value(async_load,"result"))
         prevscore=score
      }
   }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check result id...
var resultid=gj_result_id();
//If this was the login request...
if(resultid==loginrequest)
{
    if(gj_result_status())
    {
        //And init session too.
        gj_session_open()
        alarm[0]=30*room_speed //Ping every 30 seconds.
        //Let's check if user was logged in earlier.
        httprequest[2]=gj_datastore_get_user("logincount")
        httprequest[3]=gj_user_info_fromusername(gj_user_username())
    }
    else
    show_message_async(gj_result_error())
}
else if(resultid==httprequest[0]) //Score added to list (or failed...)
{
    if(gj_result_status())
    {
        //Success!
        //show_message_async("You succesfully added your score to the list.")
        httprequest[1]=gj_scores_get(global.scoreId,10) //Get new highscore.
    }
    else
    show_message_async(gj_result_error())
}
else if(resultid==httprequest[1]) //If we just recieved the highscore. 
{
    if(gj_result_status())
    {
        if(global.scoreTable != "") { 
            var jsonObject = json_decode(global.scoreTable);
            var response = ds_map_find_value(jsonObject, "response")
            var scores = ds_map_find_value(response, "scores");
            var scoreSize = ds_list_size(scores);
            if(scoreSize &gt; 0)
            {
                highscorestring = "";
                for(i = 0; i &lt; scoreSize; i++) {
                    var playerScore = scores[| i];
                    highscorestring += ds_map_find_value(playerScore, "user") + ds_map_find_value(playerScore, "sort") + "#";
                }
            }
            ds_map_destroy(response);
        }
        
        //highscorestring=gj_result_data_field("score")//+" by "+gj_result_data_field("display_name") //Set highscore text.
        //If there were multiple highscores, the following code would return the 2nd highscore.
        //gj_result_data_field_num("score",1)
        //And you would be able to check how many highscores there are with:
        //gj_result_data_count()
        //if(is_undefined(highscorestring)) {
        //    highscorestring="empty";
        //}
        
    }
    else
    highscorestring="(error)"
}
else if(resultid==httprequest[2]) //Just recieved the login count
{
    var status=gj_result_status();
    if(status==1)
    {
        //User logged in already. Check login count and add 1 to the logincount.
        gj_datastore_update_user("logincount","1","add")
        //And check how many time the user logged in before.
        loggedontimes=real(gj_result_data_field("data"))
    }
    else if(status==0)
    {
        if(gj_result_error()="No item with that key could be found.")
        {
            //Item does not exists, so user didn't logon earlier. Set login to 1 time.
            gj_datastore_set_user("logincount","1")
        }
    }
}
else if(resultid==httprequest[3]) //If we just recieved user information.
{
    if(gj_result_status())
    {
        currusertype=gj_result_data_field("type") //Loading user type.
    }
}

gj_result_clear()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw some text.
//draw_set_font(fnt_standard)
/*if!(gj_user_isloggedin())
draw_text(2,2,"Not logged on to GameJolt. Press G to log on.")
else
draw_text(2,2,"Logged on as "+string(gj_user_username())+" (We've seen you "+string(loggedontimes)+" time(s) before). You are a "+string_lower(currusertype)+".")
draw_text(2,20,"Score: "+string(score))
draw_text(2,38,"Click on blocks to get points.")
draw_text(2,56,"Press SPACE to send score.")
draw_text(2,74,"Highscore: "+highscorestring)
if(gj_user_isloggedin())
{
    if(userisawesome)
    draw_text(2,92,"You are awesome since "+awesomesince+"!")
    else
    draw_text(2,92,"You are not awesome yet (get 1000 points to be awesome)")
}*/
if(room == room1 &amp;&amp; !global.GAME_OVER) {
    //draw_text(view_xview[0], view_xview[0], score);
    draw_set_alpha(1);
    //draw_set_alpha(1);
    draw_text(view_xport[0], view_yport[0], score);
}


if(global.GAME_OVER) {
    
    
    draw_set_alpha(1);
    draw_set_colour(c_white);
    draw_text(view_xport[0], view_yport[0], "Highscores: "+highscorestring)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="88">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Login!
if(room == titleScreen) {
    if(asyncdialog[0]==-1)and!(gj_user_isloggedin())
    asyncdialog[0]=get_string_async("Please enter your GameJolt username.","")
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
