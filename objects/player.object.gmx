<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerMask</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>CONTROL_SLIDE = ord('C');
CONTROL_HOOK = ord('X');
CONTROL_JUMP = ord('Z');

CONTROL_LEFT = vk_left;
CONTROL_RIGHT = vk_right;

FRICTION = .15;
ACCELERATION = 1.15;
SpeedBoost = 0.5;
SpeedBoostDuration = 0;
SpeedBoostDurationMax = 35;

Y_FRICTION = .03;
GRAVITY = 1;
JUMP_STRENGTH = 14;
HOOK_RELEASE_JUMP = -12;
hookCount = 0;
hookCountMax = 20;

currentSpeed = 0;

lineList = ds_list_create();

directionVector[0] = 0;
directionVector[1] = 0;

currentMovement[0] = 0;
currentMovement[1] = 0;

frictionVector[0] = 0;
frictionVector[1] = 0;

movementPosition[0] = xstart;
movementPosition[1] = ystart;

collisionPoint[0] = xstart;
collisionPoint[1] = ystart;

//Hook
hooking = false;

HOOK_SPEED = 25;
HOOK_STRENGTH = 0.5;

hookPoint[0] = 0;
hookPoint[1] = 0;

hookDirection[0] = 0;
hookDirection[1] = 0;

//Sliding
sliding = false
slideBoost = false;
slideAnimationFix = 0;

//Jumping
jumpAnimationFix = 0;
pressedJump = false;

//Falling
fallAnimationFix = 0;
previousFall = 0;

hurt = false;

//hook
hookKeyboardFix = true;

hit = false;
canMove = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(lineList)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>asdf[0] = x;
asdf[1] = y - 24;

asdf2[0] = x;
asdf2[1] = y - 48;

if(!keyboard_check(CONTROL_SLIDE)){
    if (checkMapCollision(asdf) || checkMapCollision(asdf2)) {
        alarm[0] = 4;
    } else {
        sliding = false;
    }
} else {
    alarm[0] = 4;
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sliding) {
    image_speed = .43;
    sprite_index = sprPlayerSliding;
    if(slideAnimationFix == 0){
        image_index = 0;
        slideAnimationFix++;
    } else if(image_index &gt;= 7.57) {
        image_index = 2;
    }
    
} else {
    asdf[0] = x - 8;
    asdf[1] = y+1;

    asdf1[0] = x + 8;
    asdf1[1] = y+1;
    
    asdf3[0] = x - 8;
    asdf3[1] = y-1;

    asdf4[0] = x + 8;
    asdf4[1] = y-1;
        
    if(!hit){    
        if(currentMovement[1] == 0 &amp;&amp; (checkMapCollision(asdf) == 1 || checkMapCollision(asdf1) == 1 || 
        ((checkMapCollision(asdf) == 2 &amp;&amp; checkMapCollision(asdf3) == 0) || 
        (checkMapCollision(asdf1) == 2 &amp;&amp; checkMapCollision(asdf4) == 0)))) {
            if(currentMovement[0] &gt; 0) {
                animationSpeedScale = currentMovement[0] / 15;
                sprite_index = sprPlayerRunning;
                image_speed = animationSpeedScale;
            } else {
                image_speed = .3;
                sprite_index = sprPlayerStanding;
            }
        } else {
            if(currentMovement[1] &lt; 0) {
                image_speed = .3;
                
                if(jumpAnimationFix == 0) {
                    image_index = 0
                    jumpAnimationFix++;
                } 
                sprite_index = sprPlayerJumping;
                if(image_index &gt;= 3.7) {
                    image_index = 2;
                }
                
            } else {
                image_speed = .3;
                
                if(fallAnimationFix == 0) {
                    image_index = 0;
                    fallAnimationFix++;
                }
                sprite_index = sprPlayerFalling;
                
                if (image_index &gt;= 3.7) {
                    image_index = 2;
                }
            }
        }
    } else {
        image_speed = .3;
        sprite_index = sprPlayerHurt;
    }
    
}

playerMovement();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.GAME_OVER = false;
score = 0;
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
